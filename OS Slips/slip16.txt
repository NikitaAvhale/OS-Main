 Q. 1 Write a program to find the execution time taken forexecution of a given set of instructions
 (use clock)
 function)
#include <stdio.h>
#include <time.h>

int main() {
    clock_t start, end;
    double cpu_time_used;

    // Start the clock
    start = clock();

    // ðŸ§® Sample instructions: compute sum of first 1 million integers
    long long sum = 0;
    for (int i = 1; i <= 1000000; i++) {
        sum += i;
    }

    // Stop the clock
    end = clock();

    // Calculate time taken in seconds
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Sum = %lld\n", sum);
    printf("Execution Time: %.6f seconds\n", cpu_time_used);

    return 0;
}
Q.2 Write the simulation program to implementdemand paging andshow the page scheduling
 and total numberof page faults forthe following given page reference string. Give input n =3as
 the numberof memory frames.
 Reference String: 12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8
 Implement OPT
#include <stdio.h>

#define REF_LEN 16
#define MAX_FRAMES 3

int findOptimal(int frames[], int ref[], int ref_len, int index) {
    int pos[MAX_FRAMES];
    for (int i = 0; i < MAX_FRAMES; i++) {
        pos[i] = -1;
        for (int j = index + 1; j < ref_len; j++) {
            if (frames[i] == ref[j]) {
                pos[i] = j;
                break;
            }
        }
    }

    int farthest = -1, replace_index = -1;
    for (int i = 0; i < MAX_FRAMES; i++) {
        if (pos[i] == -1)
            return i; // Not used again
        if (pos[i] > farthest) {
            farthest = pos[i];
            replace_index = i;
        }
    }
    return replace_index;
}

int main() {
    int ref[REF_LEN] = {12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8};
    int frames[MAX_FRAMES];
    int page_faults = 0;
    int i, j, k, count = 0;

    for (i = 0; i < MAX_FRAMES; i++)
        frames[i] = -1;

    printf("Page Scheduling (OPT):\n");

    for (i = 0; i < REF_LEN; i++) {
        int page = ref[i];
        int found = 0;

        for (j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        if (!found) {
            if (count < MAX_FRAMES) {
                frames[count++] = page;
            } else {
                int replace_index = findOptimal(frames, ref, REF_LEN, i);
                frames[replace_index] = page;
            }
            page_faults++;
        }

        printf("Step %2d: ", i + 1);
        for (k = 0; k < MAX_FRAMES; k++) {
            if (frames[k] != -1)
                printf("%d ", frames[k]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
    return 0;
}
