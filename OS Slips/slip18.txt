 Q.1 Writea C programto accept the number ofprocess andresources and find the need matrix
 content and display it.
#include <stdio.h>

int main() {
    int p, r;

    // Input number of processes and resources
    printf("Enter the number of processes: ");
    scanf("%d", &p);
    printf("Enter the number of resources: ");
    scanf("%d", &r);

    int max[p][r], alloc[p][r], need[p][r];

    // Input Maximum matrix
    printf("\nEnter the Maximum matrix:\n");
    for (int i = 0; i < p; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < r; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input Allocation matrix
    printf("\nEnter the Allocation matrix:\n");
    for (int i = 0; i < p; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < r; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    // Calculate Need matrix: Need = Max - Allocation
    for (int i = 0; i < p; i++) {
        for (int j = 0; j < r; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    // Display Need matrix
    printf("\nNeed Matrix:\n");
    for (int i = 0; i < p; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < r; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    return 0;
}
Q.2 Writethe simulation program using SJF (non-preemptive). The arrival time and first CPU bursts of
 differentjobsshould be input tothe system. TheAssume the fixed I/Owaiting time (2units).Thenext
 CPU burst should be generated using random function. The output should give the Gantt chart,
 TurnaroundTime and Waiting time foreach process and average times.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX 10

typedef struct {
    int pid;
    int arrival;
    int burst1;
    int io;
    int burst2;
    int start;
    int completion;
    int turnaround;
    int waiting;
    int done;
} Process;

void sortByArrival(Process p[], int n) {
    Process temp;
    for (int i = 0; i < n-1; i++) {
        for (int j = i+1; j < n; j++) {
            if (p[i].arrival > p[j].arrival) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}

int main() {
    int n;
    Process p[MAX];
    float totalTAT = 0, totalWT = 0;
    int time = 0;

    srand(time(NULL)); 
    printf("Enter number of processes: ");
    scanf("%d", &n);

        for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Process %d Arrival Time: ", p[i].pid);
        scanf("%d", &p[i].arrival);
        printf("Process %d First CPU Burst: ", p[i].pid);
        scanf("%d", &p[i].burst1);
        p[i].io = 2; // Fixed I/O wait
        p[i].burst2 = rand() % 10 + 1; 
        p[i].done = 0;
    }

    sortByArrival(p, n);

    printf("\nGantt Chart:\n");

    int completed = 0;
    while (completed < n) {
        int idx = -1;
        int minBurst = 999;

        for (int i = 0; i < n; i++) {
            if (!p[i].done && p[i].arrival <= time && p[i].burst1 < minBurst) {
                minBurst = p[i].burst1;
                idx = i;
            }
        }

        if (idx == -1) {
            time++;
            continue;
        }

        p[idx].start = time;
        time += p[idx].burst1 + p[idx].io + p[idx].burst2;
        p[idx].completion = time;
        p[idx].turnaround = p[idx].completion - p[idx].arrival;
        p[idx].waiting = p[idx].turnaround - (p[idx].burst1 + p[idx].io + p[idx].burst2);
        p[idx].done = 1;
        completed++;

        printf("| P%d (%d-%d) ", p[idx].pid, p[idx].start, p[idx].completion);
        totalTAT += p[idx].turnaround;
        totalWT += p[idx].waiting;
    }

    printf("|\n\n");

    printf("PID\tArrival\tBurst1\tIO\tBurst2\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%6d\t%6d\t%2d\t%6d\t%2d\t%3d\t%2d\n",
            p[i].pid, p[i].arrival, p[i].burst1, p[i].io, p[i].burst2,
            p[i].completion, p[i].turnaround, p[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", totalTAT / n);
    printf("Average Waiting Time: %.2f\n", totalWT / n);

    return 0;
}