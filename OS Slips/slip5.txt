Q.1 Writea programthat demonstrates the use of nice() systemcall. After a child process is started using fork), assign higher priority to the child using nice)system call
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
int main()
{	
int pid,retnice;
pid=fork();
for(;;)
{
if(pid==0)
{
retnice=nice(-5);
printf("Child get higher CPU priority %d\n",retnice);
sleep(1);
}
else 
{
retnice=nice(4);
printf("Parent get lower CPU priority %d\n",retnice);
sleep(1);
}
}
}

Q.2 Q.2 Write the simulation program to implement demand paging and show the pagescheduling
 and total numberof page faults forthe following given page reference string. Giveinput n as the
 number of memory frames. Reference String:3,4, 5,6,3,4,7,3,4,5,6,7,2,4, 6
 i.
 Implement FIFO

#include <stdio.h>

#define MAX_FRAMES 10
#define REF_LEN 15

int main() {
    int n, i, j, k, page_faults = 0;
    int frames[MAX_FRAMES], ref_string[REF_LEN] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    int front = 0;

    printf("Enter number of memory frames: ");
    scanf("%d", &n);

    
    for (i = 0; i < n; i++)
        frames[i] = -1;

    printf("\nPage Scheduling:\n");

    for (i = 0; i < REF_LEN; i++) {
        int page = ref_string[i];
        int found = 0;

        // Check if page is already in frame
        for (j = 0; j < n; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        
        if (!found) {
            frames[front] = page;
            front = (front + 1) % n;
            page_faults++;
        }

                printf("Step %2d: ", i + 1);
        for (k = 0; k < n; k++) {
            if (frames[k] != -1)
                printf("%d ", frames[k]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
    return 0;
}