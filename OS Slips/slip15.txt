Q.1Write a program to create child process using fork().The parent should gotosleep state and
 child process should begin its execution. In the child process, use execl() to execute the ls"
 command.
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>

int main() {
    pid_t pid;

    pid = fork();  // Create child process

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }
    else if (pid == 0) {
        
        printf("Child process executing 'ls' command:\n");
        execl("/bin/ls", "ls", "-l", NULL);  // Replace child with ls
        perror("execl failed");  // Only runs if execl fails
    }
    else {
                printf("Parent process going to sleep...\n");
        sleep(5);  // Sleep for 5 seconds
        printf("Parent process woke up.\n");
    }

    return 0;
}

 Q.2Write the program to simulate Preemptive Shortest JobFirst (SJF)-scheduling. The arrival time and
 first CPU-burst for different n number of processes should be input to the algorithm. Assumethe
 fixed IO waiting time (2units). The next CPU-burstshould begenerated randomly.Theoutputshould
 give Gantt chart,turnaround time and waiting time for each process. Also find the averagewaiting
 time and turnaround time.
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <time.h>

#define MAX 20
#define IO_WAIT 2

typedef struct {
    int pid;
    int arrival;
    int cpu1;
    int cpu2;
    int remaining;
    int finish;
    int turnaround;
    int waiting;
    int started;
    int io_done;
    int completed;
} Process;

int main() {
    Process p[MAX];
    int n, i, time = 0, completed = 0;
    int gantt[MAX * 50], gindex = 0;
    float total_tat = 0, total_wt = 0;

    srand(time(NULL)); 
    printf("Enter number of processes: ");
    scanf("%d", &n);

        for (i = 0; i < n; i++) {
        p[i].pid = i;
        printf("Process P%d - Arrival Time: ", i);
        scanf("%d", &p[i].arrival);
        printf("Process P%d - First CPU Burst: ", i);
        scanf("%d", &p[i].cpu1);
        p[i].cpu2 = rand() % 5 + 1;         p[i].remaining = p[i].cpu1;
        p[i].started = 0;
        p[i].io_done = 0;
        p[i].completed = 0;
    }

    printf("\nGantt Chart:\n| ");

    while (completed < n) {
        int idx = -1;
        int min_remain = INT_MAX;

                for (i = 0; i < n; i++) {
            if (p[i].arrival <= time && !p[i].completed && p[i].remaining > 0) {
                if (p[i].remaining < min_remain) {
                    min_remain = p[i].remaining;
                    idx = i;
                }
            }
        }

        if (idx == -1) {
            time++;
            continue;
        }

        gantt[gindex++] = p[idx].pid;
        p[idx].remaining--;
        time++;

        
        if (p[idx].remaining == 0 && p[idx].io_done == 0) {
            time += IO_WAIT;
            p[idx].io_done = 1;
            p[idx].remaining = p[idx].cpu2;
        }
                else if (p[idx].remaining == 0 && p[idx].io_done == 1) {
            p[idx].finish = time;
            p[idx].turnaround = p[idx].finish - p[idx].arrival;
            p[idx].waiting = p[idx].turnaround - (p[idx].cpu1 + p[idx].cpu2 + IO_WAIT);
            total_tat += p[idx].turnaround;
            total_wt += p[idx].waiting;
            p[idx].completed = 1;
            completed++;
        }
    }

        for (i = 0; i < gindex; i++) {
        printf("P%d | ", gantt[i]);
    }

       printf("\n\n%-5s %-8s %-8s %-8s %-8s %-8s %-8s\n", "PID", "Arrival", "CPU1", "CPU2", "Finish", "TAT", "WT");
    for (i = 0; i < n; i++) {
        printf("%-5d %-8d %-8d %-8d %-8d %-8d %-8d\n",
               p[i].pid, p[i].arrival, p[i].cpu1, p[i].cpu2,
               p[i].finish, p[i].turnaround, p[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f", total_tat / n);
    printf("\nAverage Waiting Time: %.2f\n", total_wt / n);

    return 0;
}