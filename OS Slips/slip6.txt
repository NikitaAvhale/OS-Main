 Q.1 Write a program to find the execution time taken for execution of a given set of instructions
 (use clock)function)
#include <stdio.h>
#include <time.h>

int main() {
    clock_t start, end;
    double cpu_time_used;

        start = clock();

   
    int sum = 0;
    for (int i = 0; i < 1000000; i++) {
        sum += i;
    }

       end = clock();

        cpu_time_used = ((double)(end - start)) 
    printf("Sum = %d\n", sum);
    printf("Execution Time: %f seconds\n", cpu_time_used);

    return 0;
}

 Q.2 Write the simulation program to implement demand paging and show the pagescheduling
 and total numberof page faults for the following given page reference string. Give input n as the
 number of memory frames.
 Reference String :3, 4, 5,6,3, 4, 7, 3,4, 5,6,7,2,4, 6
 Implement FIFO
#include <stdio.h>

#define REF_LEN 15

int main() {
    int n, i, j, k, page_faults = 0;
    int frames[10], ref_string[REF_LEN] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    int front = 0;

    printf("Enter number of memory frames: ");
    scanf("%d", &n);

        for (i = 0; i < n; i++)
        frames[i] = -1;

    printf("\nPage Scheduling:\n");

    for (i = 0; i < REF_LEN; i++) {
        int page = ref_string[i];
        int found = 0;

                for (j = 0; j < n; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        
        if (!found) {
            frames[front] = page;
            front = (front + 1) % n;
            page_faults++;
        }

        
        printf("Step %2d: ", i + 1);
        for (k = 0; k < n; k++) {
            if (frames[k] != -1)
                printf("%d ", frames[k]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
    return 0;
}
