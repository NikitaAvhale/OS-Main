 Q.1WriteaC programto accept the number of processand resources and find the need matrix
 content and display it.

#include <stdio.h>

int main() {
    int n, m;     int allocation[10][10], max[10][10], need[10][10];

    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

        printf("\nEnter Allocation Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("Process P%d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Input Max matrix
    printf("\nEnter Max Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("Process P%d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

        for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            need[i][j] = max[i][j] - allocation[i][j];

        printf("\nNeed Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d: ", i);
        for (int j = 0; j < m; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    return 0;
}


Q.2. Write the simulation programto implementdemand paging and show the page seheduling andtotal number of page faults for the following given pagereference string. Give input n =3as the numberof memory frames. Reference String: 12,15,12, 1 8,6,8,11,12,19,12,6,8,12,15,19,8 Implement OPT  in c code
#include <stdio.h>

#define REF_LEN 16
#define MAX_FRAMES 10

int findOptimal(int frames[], int ref[], int ref_len, int index, int n) {
    int pos[MAX_FRAMES];
    for (int i = 0; i < n; i++) {
        pos[i] = -1;
        for (int j = index + 1; j < ref_len; j++) {
            if (frames[i] == ref[j]) {
                pos[i] = j;
                break;
            }
        }
    }

    int farthest = -1, replace_index = -1;
    for (int i = 0; i < n; i++) {
        if (pos[i] == -1) {
            return i; // Not used again
        }
        if (pos[i] > farthest) {
            farthest = pos[i];
            replace_index = i;
        }
    }
    return replace_index;
}

int main() {
    int n = 3; // Number of frames
    int ref[REF_LEN] = {12, 15, 12, 1, 8, 6, 8, 11, 12, 19, 12, 6, 8, 12, 15, 19};
    int frames[MAX_FRAMES], page_faults = 0;
    int i, j, k, count = 0;

    for (i = 0; i < n; i++)
        frames[i] = -1;

    printf("Page Scheduling (OPT):\n");

    for (i = 0; i < REF_LEN; i++) {
        int page = ref[i];
        int found = 0;

        for (j = 0; j < n; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        if (!found) {
            if (count < n) {
                frames[count++] = page;
            } else {
                int replace_index = findOptimal(frames, ref, REF_LEN, i, n);
                frames[replace_index] = page;
            }
            page_faults++;
        }

        printf("Step %2d: ", i + 1);
        for (k = 0; k < n; k++) {
            if (frames[k] != -1)
                printf("%d ", frames[k]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
    return 0;
}