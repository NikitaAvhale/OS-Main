Q.1Create a child process using fork(),display parent and child process id. Child process will display the message *HelloWorld" and the parent process should display "Hi". [10marks]
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid;

   
    pid = fork();

    if (pid < 0) {
       
        printf("Fork failed!\n");
        return 1;
    }
    else if (pid == 0) {
        
        printf("Child Process ID: %d\n", getpid());
        printf("Parent Process ID: %d\n", getppid());
        printf("Hello World\n");
    }
    else {
    
        printf("Parent Process ID: %d\n", getpid());
        printf("Child Process ID: %d\n", pid);
        printf("Hi\n");
    }

    return 0;
}


 Q.2Write the simulation program to implement demand paging and show the page scheduling
 and total numberof page faults forthe following given page reference string. Give input n as the
 numberof memory frames.
 Reference String:0,2, 1, 6, 4,0, 1, 0,3,1, 2, 1
 Implement FIFO

#include <stdio.h>

#define REF_LEN 12
#define MAX_FRAMES 10

int main() {
    int n, i, j, k, page_faults = 0;
    int frames[MAX_FRAMES], ref_string[REF_LEN] = {0, 2, 1, 6, 4, 0, 1, 0, 3, 1, 2, 1};
    int front = 0;

    printf("Enter number of memory frames: ");
    scanf("%d", &n);

    
    for (i = 0; i < n; i++)
        frames[i] = -1;

    printf("\nPage Scheduling (FIFO):\n");

    for (i = 0; i < REF_LEN; i++) {
        int page = ref_string[i];
        int found = 0;

                for (j = 0; j < n; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

                if (!found) {
            frames[front] = page;
            front = (front + 1) % n;
            page_faults++;
        }

                printf("Step %2d: ", i + 1);
        for (k = 0; k < n; k++) {
            if (frames[k] != -1)
                printf("%d ", frames[k]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
    return 0;
}